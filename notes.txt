> Python needs a MySQL driver to access the MySQL database, known as MySQL Connector.

> Example of creating database in MySQL through Python
>>  import mysql.connector

    mydb = mysql.connector.connect(
    host="localhost",
    user="yourusername",
    password="yourpassword"
    )

    mycursor = mydb.cursor()

    mycursor.execute("CREATE DATABASE mydatabase")

> Get to known about present databases in MySQL DATABASE
>> "SHOW DATABASES"

> Create Table
>> "CREATE TABLE {table_name} (
    {col_name} {datatype} {constraint},
    {} {} {},
    {} {} {},
    {} {} {}

    )"

> Get to known about present tables in a particular database
>> "SHOW TABLES"

> See Table structure
>> "DESC {database_name}.{table_name}"

> Insert data into table
>> "INSERT INTO {table_name} ({col_names} VALUES {values_respective_to_columns})"
>> db.commit()

> Insert multiple data
>> query = "INSERT INTO {table_name} ({col_names}) VALUES ({%s placeholders})" 
>> val = [({values_respective_to_columns in a tuple}), (), ()]
>> cursor.executemany(query, val)
>> db.commit()

> Select to display the data from table
>> "SELECT * FROM {database_name}.{table_name}"

> Select specific columns from table.
>> "SELECT {col_names} FROM {database_name}.{table_name} "


> When selecting records from a table, you can filter the selection by using the "WHERE" statement:
>> "SELECT * FROM {database_name}.{table_name} WHERE {col_name} {contion}"

> Wild card characters for select the records that starts, includes, or ends with a given letter or phrase.
>> Wild card character represented by %
>> "SELECT * FROM {table_name} WHERE {col_name} LIKE '%way%'" 

> ORDER BY statement to sort the result in ascending or descending order.
>> "SELECT * FROM {table_name} ORDER BY {col_name}"

> ORDER BY in descending order
>> "SELECT * FROM {table_name} ORDER BY {col_name} DESC"

> Delete records from table
>> "DELETE * FROM {database_name}.{table_name} WHERE {col_name} {contion}"

> DROP TABLE : This will drop entire table data and its structure as well.
>> "DROP TABLE {database_name}.{table_name}"

> TRUNCATE TABLE: This will drop the data inside table but maintained the table structure.
>> "TRUNCATE TABLE {database_name}.{table_name}"

> ALTER TABLE: It is used to update the structure of table like col_names and constraints.
>> "ALTER TABLE {table_name} ADD {update_col}"
>> "ALTER TABLE {table_name} DROP COLUMN {drop_col}"
>> "ALTER TABLE {table_name} MODIFY COLUMN {modify_col}"

> UPDATE TABLE: This is used to update existing records of the table.
>> "UPDATE {table_name} SET {col_name_want_to_update} = {new_data} WHERE {col_name_with_existing_data} = {existing_data}"










